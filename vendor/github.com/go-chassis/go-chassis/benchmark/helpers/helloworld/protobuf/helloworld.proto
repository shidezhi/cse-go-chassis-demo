// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.helloworld";
option java_outer_classname = "HelloWorldProto";

package helloworld;

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}
  rpc CreateMessage (MessageRequest) returns (HelloReply) {}
  rpc GetMessage (NullMessageRequest) returns (HelloReply) {}
  rpc Calculate (NumberIn) returns (NumberOut){}
  rpc TypeList (TypeMessage) returns (TypeMessage) {}
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

message MessageRequest{
  string str = 1;
  int64 count=2;
}

message NumberIn{
  float number1=1;
  float number2=2;
}

message NumberOut{
  float number=1;
}

message NullMessageRequest {}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}

message TypeMessage {
  double doubleType = 1;
  float floatType = 2;
  int32 int32Type = 3;
  int64 int64Type = 4;
  bool boolType = 5;
  string stringType = 6;
  bytes bytesType = 7;
  enum Corpus {
      UNIVERSAL = 0;
      WEB = 1;
      IMAGES = 2;
    }
  Corpus corpus = 8;
  MessageRequest messageRequest = 9;
  repeated string repeatedString = 10;
  map<string, MessageRequest> mapType  = 11;
  repeated int32 repeatedInt = 12;
  uint32 uint32Type = 13;
  uint64 uint64Type = 14;
  sint32 sint32Type = 15;
  sint64 sint64Type = 16;
  fixed32 fixed32Type = 17;
  fixed64 fixed64Type = 18;
  sfixed32 sfixed32Type = 19;
  sfixed64 sfixed64Type = 20;

}
