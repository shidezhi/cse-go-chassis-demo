// Code generated by protoc-gen-go.
// source: helloworld.proto
// DO NOT EDIT!

/*
Package helloworld is a generated protocol buffer package.

It is generated from these files:
	helloworld.proto

It has these top-level messages:
	HelloRequest
	MessageRequest
	NumberIn
	NumberOut
	NullMessageRequest
	HelloReply
	TypeMessage
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TypeMessage_Corpus int32

const (
	TypeMessage_UNIVERSAL TypeMessage_Corpus = 0
	TypeMessage_WEB       TypeMessage_Corpus = 1
	TypeMessage_IMAGES    TypeMessage_Corpus = 2
)

var TypeMessage_Corpus_name = map[int32]string{
	0: "UNIVERSAL",
	1: "WEB",
	2: "IMAGES",
}
var TypeMessage_Corpus_value = map[string]int32{
	"UNIVERSAL": 0,
	"WEB":       1,
	"IMAGES":    2,
}

func (x TypeMessage_Corpus) String() string {
	return proto.EnumName(TypeMessage_Corpus_name, int32(x))
}

func (TypeMessage_Corpus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

// The request message containing the user's name.
type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type MessageRequest struct {
	Str   string `protobuf:"bytes,1,opt,name=str" json:"str"`
	Count int64  `protobuf:"varint,2,opt,name=count" json:"count"`
}

func (m *MessageRequest) Reset()                    { *m = MessageRequest{} }
func (m *MessageRequest) String() string            { return proto.CompactTextString(m) }
func (*MessageRequest) ProtoMessage()               {}
func (*MessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MessageRequest) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *MessageRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type NumberIn struct {
	Number1 float32 `protobuf:"fixed32,1,opt,name=number1" json:"number1"`
	Number2 float32 `protobuf:"fixed32,2,opt,name=number2" json:"number2,omitempty"`
}

func (m *NumberIn) Reset()                    { *m = NumberIn{} }
func (m *NumberIn) String() string            { return proto.CompactTextString(m) }
func (*NumberIn) ProtoMessage()               {}
func (*NumberIn) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NumberIn) GetNumber1() float32 {
	if m != nil {
		return m.Number1
	}
	return 0
}

func (m *NumberIn) GetNumber2() float32 {
	if m != nil {
		return m.Number2
	}
	return 0
}

type NumberOut struct {
	Number float32 `protobuf:"fixed32,1,opt,name=number" json:"number"`
}

func (m *NumberOut) Reset()                    { *m = NumberOut{} }
func (m *NumberOut) String() string            { return proto.CompactTextString(m) }
func (*NumberOut) ProtoMessage()               {}
func (*NumberOut) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NumberOut) GetNumber() float32 {
	if m != nil {
		return m.Number
	}
	return 0
}

type NullMessageRequest struct {
}

func (m *NullMessageRequest) Reset()                    { *m = NullMessageRequest{} }
func (m *NullMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*NullMessageRequest) ProtoMessage()               {}
func (*NullMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// The response message containing the greetings
type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type TypeMessage struct {
	DoubleType     float64                    `protobuf:"fixed64,1,opt,name=doubleType" json:"doubleType,omitempty"`
	FloatType      float32                    `protobuf:"fixed32,2,opt,name=floatType" json:"floatType,omitempty"`
	Int32Type      int32                      `protobuf:"varint,3,opt,name=int32Type" json:"int32Type,omitempty"`
	Int64Type      int64                      `protobuf:"varint,4,opt,name=int64Type" json:"int64Type,omitempty"`
	BoolType       bool                       `protobuf:"varint,5,opt,name=boolType" json:"boolType,omitempty"`
	StringType     string                     `protobuf:"bytes,6,opt,name=stringType" json:"stringType,omitempty"`
	BytesType      []byte                     `protobuf:"bytes,7,opt,name=bytesType,proto3" json:"bytesType,omitempty"`
	Corpus         TypeMessage_Corpus         `protobuf:"varint,8,opt,name=corpus,enum=helloworld.TypeMessage_Corpus" json:"corpus,omitempty"`
	MessageRequest *MessageRequest            `protobuf:"bytes,9,opt,name=messageRequest" json:"messageRequest,omitempty"`
	RepeatedString []string                   `protobuf:"bytes,10,rep,name=repeatedString" json:"repeatedString,omitempty"`
	MapType        map[string]*MessageRequest `protobuf:"bytes,11,rep,name=mapType" json:"mapType,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RepeatedInt    []int32                    `protobuf:"varint,12,rep,packed,name=repeatedInt" json:"repeatedInt,omitempty"`
	Uint32Type     uint32                     `protobuf:"varint,13,opt,name=uint32Type" json:"uint32Type,omitempty"`
	Uint64Type     uint64                     `protobuf:"varint,14,opt,name=uint64Type" json:"uint64Type,omitempty"`
	Sint32Type     int32                      `protobuf:"zigzag32,15,opt,name=sint32Type" json:"sint32Type,omitempty"`
	Sint64Type     int64                      `protobuf:"zigzag64,16,opt,name=sint64Type" json:"sint64Type,omitempty"`
	Fixed32Type    uint32                     `protobuf:"fixed32,17,opt,name=fixed32Type" json:"fixed32Type,omitempty"`
	Fixed64Type    uint64                     `protobuf:"fixed64,18,opt,name=fixed64Type" json:"fixed64Type,omitempty"`
	Sfixed32Type   int32                      `protobuf:"fixed32,19,opt,name=sfixed32Type" json:"sfixed32Type,omitempty"`
	Sfixed64Type   int64                      `protobuf:"fixed64,20,opt,name=sfixed64Type" json:"sfixed64Type,omitempty"`
}

func (m *TypeMessage) Reset()                    { *m = TypeMessage{} }
func (m *TypeMessage) String() string            { return proto.CompactTextString(m) }
func (*TypeMessage) ProtoMessage()               {}
func (*TypeMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TypeMessage) GetDoubleType() float64 {
	if m != nil {
		return m.DoubleType
	}
	return 0
}

func (m *TypeMessage) GetFloatType() float32 {
	if m != nil {
		return m.FloatType
	}
	return 0
}

func (m *TypeMessage) GetInt32Type() int32 {
	if m != nil {
		return m.Int32Type
	}
	return 0
}

func (m *TypeMessage) GetInt64Type() int64 {
	if m != nil {
		return m.Int64Type
	}
	return 0
}

func (m *TypeMessage) GetBoolType() bool {
	if m != nil {
		return m.BoolType
	}
	return false
}

func (m *TypeMessage) GetStringType() string {
	if m != nil {
		return m.StringType
	}
	return ""
}

func (m *TypeMessage) GetBytesType() []byte {
	if m != nil {
		return m.BytesType
	}
	return nil
}

func (m *TypeMessage) GetCorpus() TypeMessage_Corpus {
	if m != nil {
		return m.Corpus
	}
	return TypeMessage_UNIVERSAL
}

func (m *TypeMessage) GetMessageRequest() *MessageRequest {
	if m != nil {
		return m.MessageRequest
	}
	return nil
}

func (m *TypeMessage) GetRepeatedString() []string {
	if m != nil {
		return m.RepeatedString
	}
	return nil
}

func (m *TypeMessage) GetMapType() map[string]*MessageRequest {
	if m != nil {
		return m.MapType
	}
	return nil
}

func (m *TypeMessage) GetRepeatedInt() []int32 {
	if m != nil {
		return m.RepeatedInt
	}
	return nil
}

func (m *TypeMessage) GetUint32Type() uint32 {
	if m != nil {
		return m.Uint32Type
	}
	return 0
}

func (m *TypeMessage) GetUint64Type() uint64 {
	if m != nil {
		return m.Uint64Type
	}
	return 0
}

func (m *TypeMessage) GetSint32Type() int32 {
	if m != nil {
		return m.Sint32Type
	}
	return 0
}

func (m *TypeMessage) GetSint64Type() int64 {
	if m != nil {
		return m.Sint64Type
	}
	return 0
}

func (m *TypeMessage) GetFixed32Type() uint32 {
	if m != nil {
		return m.Fixed32Type
	}
	return 0
}

func (m *TypeMessage) GetFixed64Type() uint64 {
	if m != nil {
		return m.Fixed64Type
	}
	return 0
}

func (m *TypeMessage) GetSfixed32Type() int32 {
	if m != nil {
		return m.Sfixed32Type
	}
	return 0
}

func (m *TypeMessage) GetSfixed64Type() int64 {
	if m != nil {
		return m.Sfixed64Type
	}
	return 0
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "helloworld.HelloRequest")
	proto.RegisterType((*MessageRequest)(nil), "helloworld.MessageRequest")
	proto.RegisterType((*NumberIn)(nil), "helloworld.NumberIn")
	proto.RegisterType((*NumberOut)(nil), "helloworld.NumberOut")
	proto.RegisterType((*NullMessageRequest)(nil), "helloworld.NullMessageRequest")
	proto.RegisterType((*HelloReply)(nil), "helloworld.HelloReply")
	proto.RegisterType((*TypeMessage)(nil), "helloworld.TypeMessage")
	proto.RegisterEnum("helloworld.TypeMessage_Corpus", TypeMessage_Corpus_name, TypeMessage_Corpus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Greeter service

type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	CreateMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*HelloReply, error)
	GetMessage(ctx context.Context, in *NullMessageRequest, opts ...grpc.CallOption) (*HelloReply, error)
	Calculate(ctx context.Context, in *NumberIn, opts ...grpc.CallOption) (*NumberOut, error)
	TypeList(ctx context.Context, in *TypeMessage, opts ...grpc.CallOption) (*TypeMessage, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) CreateMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/CreateMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GetMessage(ctx context.Context, in *NullMessageRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/GetMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) Calculate(ctx context.Context, in *NumberIn, opts ...grpc.CallOption) (*NumberOut, error) {
	out := new(NumberOut)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/Calculate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) TypeList(ctx context.Context, in *TypeMessage, opts ...grpc.CallOption) (*TypeMessage, error) {
	out := new(TypeMessage)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/TypeList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greeter service

type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	CreateMessage(context.Context, *MessageRequest) (*HelloReply, error)
	GetMessage(context.Context, *NullMessageRequest) (*HelloReply, error)
	Calculate(context.Context, *NumberIn) (*NumberOut, error)
	TypeList(context.Context, *TypeMessage) (*TypeMessage, error)
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/CreateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).CreateMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GetMessage(ctx, req.(*NullMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_Calculate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).Calculate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/Calculate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).Calculate(ctx, req.(*NumberIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_TypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).TypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/TypeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).TypeList(ctx, req.(*TypeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _Greeter_CreateMessage_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _Greeter_GetMessage_Handler,
		},
		{
			MethodName: "Calculate",
			Handler:    _Greeter_Calculate_Handler,
		},
		{
			MethodName: "TypeList",
			Handler:    _Greeter_TypeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld.proto",
}

func init() { proto.RegisterFile("helloworld.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 701 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0x5d, 0x4f, 0xdb, 0x30,
	0x14, 0xad, 0x5b, 0x9a, 0xb6, 0xb7, 0x1f, 0x14, 0xaf, 0x63, 0x51, 0x37, 0x21, 0x2b, 0x9b, 0x90,
	0x1f, 0xa6, 0x8a, 0x95, 0x09, 0x21, 0x1e, 0x90, 0x28, 0xea, 0x58, 0x25, 0xbe, 0xe4, 0x6e, 0xf0,
	0x9c, 0xb6, 0x86, 0x55, 0xa4, 0x49, 0x96, 0x38, 0x1b, 0xf9, 0x9f, 0xfb, 0x33, 0x7b, 0x9b, 0xec,
	0x24, 0x8d, 0x0b, 0xa3, 0x6f, 0xbe, 0xe7, 0x9c, 0x7b, 0x73, 0x7c, 0xaf, 0xed, 0x40, 0xfb, 0x07,
	0x77, 0x1c, 0xef, 0xb7, 0x17, 0x38, 0xb3, 0x9e, 0x1f, 0x78, 0xc2, 0xc3, 0x90, 0x23, 0x96, 0x05,
	0x8d, 0xaf, 0x32, 0x62, 0xfc, 0x67, 0xc4, 0x43, 0x81, 0x31, 0x6c, 0xb8, 0xf6, 0x82, 0x9b, 0x88,
	0x20, 0x5a, 0x63, 0x6a, 0x6d, 0x1d, 0x42, 0xeb, 0x82, 0x87, 0xa1, 0x7d, 0xcf, 0x33, 0x55, 0x1b,
	0x4a, 0xa1, 0x08, 0x52, 0x91, 0x5c, 0xe2, 0x0e, 0x94, 0xa7, 0x5e, 0xe4, 0x0a, 0xb3, 0x48, 0x10,
	0x2d, 0xb1, 0x24, 0xb0, 0x8e, 0xa1, 0x7a, 0x19, 0x2d, 0x26, 0x3c, 0x18, 0xb9, 0xd8, 0x84, 0x8a,
	0xab, 0xd6, 0x9f, 0x54, 0x5e, 0x91, 0x65, 0x61, 0xce, 0xf4, 0x55, 0xf6, 0x92, 0xe9, 0x5b, 0xef,
	0xa1, 0x96, 0xe4, 0x5f, 0x45, 0x02, 0x6f, 0x83, 0x91, 0xe0, 0x69, 0x7e, 0x1a, 0x59, 0x1d, 0xc0,
	0x97, 0x91, 0xe3, 0xac, 0x5a, 0xb4, 0x76, 0x01, 0xd2, 0x8d, 0xf9, 0x4e, 0x2c, 0x3f, 0xb1, 0x48,
	0xf8, 0xd4, 0x74, 0x16, 0x5a, 0x7f, 0x0d, 0xa8, 0x7f, 0x8b, 0x7d, 0x9e, 0xa6, 0xe3, 0x1d, 0x80,
	0x99, 0x17, 0x4d, 0x1c, 0x2e, 0x41, 0x25, 0x46, 0x4c, 0x43, 0xf0, 0x3b, 0xa8, 0xdd, 0x39, 0x9e,
	0x2d, 0x14, 0x9d, 0xd8, 0xcd, 0x01, 0xc9, 0xce, 0x5d, 0xb1, 0xdf, 0x57, 0x6c, 0x89, 0x20, 0x5a,
	0x66, 0x39, 0x90, 0xb2, 0x07, 0x9f, 0x15, 0xbb, 0xa1, 0x1a, 0x95, 0x03, 0xb8, 0x0b, 0xd5, 0x89,
	0xe7, 0x39, 0x8a, 0x2c, 0x13, 0x44, 0xab, 0x6c, 0x19, 0x4b, 0x57, 0xa1, 0x08, 0xe6, 0xee, 0xbd,
	0x62, 0x0d, 0xb5, 0x05, 0x0d, 0x91, 0x95, 0x27, 0xb1, 0xe0, 0xa1, 0xa2, 0x2b, 0x04, 0xd1, 0x06,
	0xcb, 0x01, 0x7c, 0x00, 0xc6, 0xd4, 0x0b, 0xfc, 0x28, 0x34, 0xab, 0x04, 0xd1, 0x56, 0x7f, 0xa7,
	0xa7, 0x9d, 0x09, 0x6d, 0xf3, 0xbd, 0x53, 0xa5, 0x62, 0xa9, 0x1a, 0x0f, 0xa0, 0xb5, 0x58, 0xe9,
	0xaa, 0x59, 0x23, 0x88, 0xd6, 0xfb, 0x5d, 0x3d, 0x7f, 0xb5, 0xef, 0xec, 0x49, 0x06, 0xde, 0x85,
	0x56, 0xc0, 0x7d, 0x6e, 0x0b, 0x3e, 0x1b, 0x2b, 0xbf, 0x26, 0x90, 0x12, 0xad, 0xb1, 0x27, 0x28,
	0x3e, 0x86, 0xca, 0xc2, 0xf6, 0x95, 0xff, 0x3a, 0x29, 0xd1, 0x7a, 0xff, 0xc3, 0x4b, 0x26, 0x2f,
	0x12, 0xd9, 0xd0, 0x15, 0x41, 0xcc, 0xb2, 0x24, 0x4c, 0xa0, 0x9e, 0x55, 0x1c, 0xb9, 0xc2, 0x6c,
	0x90, 0x12, 0x2d, 0x33, 0x1d, 0x92, 0x3d, 0x8c, 0xf2, 0xe1, 0x34, 0x09, 0xa2, 0x4d, 0xa6, 0x21,
	0x19, 0x9f, 0x8e, 0xa7, 0x45, 0x10, 0xdd, 0x60, 0x1a, 0xa2, 0x66, 0x90, 0xe7, 0x6f, 0x12, 0x44,
	0xb7, 0x98, 0x86, 0x64, 0x7c, 0x9a, 0xdf, 0x26, 0x88, 0x62, 0xa6, 0x21, 0xd2, 0xe1, 0xdd, 0xfc,
	0x91, 0xcf, 0xd2, 0x02, 0x5b, 0x04, 0xd1, 0x0a, 0xd3, 0xa1, 0xa5, 0x22, 0x2d, 0x81, 0x09, 0xa2,
	0x06, 0xd3, 0x21, 0x6c, 0x41, 0x23, 0xd4, 0x8b, 0xbc, 0x22, 0x88, 0x6e, 0xb2, 0x15, 0x2c, 0xd7,
	0xa4, 0x65, 0x3a, 0x04, 0xd1, 0x36, 0x5b, 0xc1, 0xba, 0x37, 0xd0, 0xd0, 0xdb, 0x28, 0x2f, 0xf4,
	0x03, 0x8f, 0xb3, 0x0b, 0xfd, 0xc0, 0x63, 0xbc, 0x07, 0xe5, 0x5f, 0xb6, 0x13, 0x25, 0x67, 0x7c,
	0xfd, 0xc8, 0x13, 0xe1, 0x51, 0xf1, 0x10, 0x59, 0x1f, 0xc1, 0x48, 0xce, 0x10, 0x6e, 0x42, 0xed,
	0xfb, 0xe5, 0xe8, 0x66, 0xc8, 0xc6, 0x27, 0xe7, 0xed, 0x02, 0xae, 0x40, 0xe9, 0x76, 0x38, 0x68,
	0x23, 0x0c, 0x60, 0x8c, 0x2e, 0x4e, 0xce, 0x86, 0xe3, 0x76, 0xb1, 0xff, 0xa7, 0x08, 0x95, 0xb3,
	0x80, 0x73, 0xc1, 0x03, 0x7c, 0x0c, 0xd5, 0xb1, 0x1d, 0xab, 0x2b, 0x8b, 0x4d, 0xfd, 0x63, 0xfa,
	0xf3, 0xd4, 0xdd, 0xfe, 0x0f, 0xe3, 0x3b, 0xb1, 0x55, 0xc0, 0x43, 0x68, 0x9e, 0x06, 0x72, 0xd6,
	0xd9, 0x45, 0x5e, 0xe3, 0x78, 0x4d, 0x99, 0x2f, 0x00, 0x67, 0x5c, 0x2c, 0x1f, 0x03, 0x5d, 0xf7,
	0xfc, 0x91, 0x59, 0x53, 0xe7, 0x08, 0x6a, 0xa7, 0xb6, 0x33, 0x8d, 0x1c, 0x5b, 0x70, 0xdc, 0x59,
	0x2d, 0x93, 0x3c, 0x88, 0xdd, 0xd7, 0xcf, 0xd1, 0xab, 0x48, 0x58, 0x05, 0xd9, 0x0a, 0x39, 0x99,
	0xf3, 0x79, 0x28, 0xf0, 0x9b, 0x17, 0x6e, 0x41, 0xf7, 0x25, 0xc2, 0x2a, 0x0c, 0xf6, 0xe0, 0xed,
	0xdc, 0xeb, 0xdd, 0x07, 0xfe, 0xb4, 0xc7, 0x1f, 0xed, 0x85, 0xef, 0xf0, 0x50, 0x13, 0x0f, 0x36,
	0x95, 0xd1, 0x5b, 0xb9, 0xbe, 0x96, 0xff, 0x83, 0x6b, 0x34, 0x31, 0xd4, 0x8f, 0x61, 0xff, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x55, 0x38, 0x2a, 0xfb, 0x2c, 0x06, 0x00, 0x00,
}
